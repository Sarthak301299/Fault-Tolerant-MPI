#ifndef _ETYPE_DEFINITION_H_
#define _ETYPE_DEFINITION_H_
typedef int EMPI_Datatype;
typedef int EMPI_Comm;
typedef int EMPI_Group;
typedef int EMPI_Win;
typedef struct ADIOI_FileD *EMPI_File;
typedef int EMPI_Op;
typedef enum EMPIR_Win_flavor {EMPI_WIN_FLAVOR_CREATE = 1,    EMPI_WIN_FLAVOR_ALLOCATE = 2,    EMPI_WIN_FLAVOR_DYNAMIC = 3,    EMPI_WIN_FLAVOR_SHARED = 4} EMPIR_Win_flavor_t;
typedef enum EMPIR_Win_model {EMPI_WIN_SEPARATE = 1,    EMPI_WIN_UNIFIED = 2} EMPIR_Win_model_t;
typedef enum EMPIR_Topo_type {EMPI_GRAPH=1, EMPI_CART=2, EMPI_DIST_GRAPH=3} EMPIR_Topo_type;
typedef void (EMPI_Handler_function) ( EMPI_Comm *, int *, ... );
typedef int (EMPI_Comm_copy_attr_function)(EMPI_Comm, int, void *, void *,        void *, int *);
typedef int (EMPI_Comm_delete_attr_function)(EMPI_Comm, int, void *, void *);
typedef int (EMPI_Type_copy_attr_function)(EMPI_Datatype, int, void *, void *,        void *, int *);
typedef int (EMPI_Type_delete_attr_function)(EMPI_Datatype, int, void *, void *);
typedef int (EMPI_Win_copy_attr_function)(EMPI_Win, int, void *, void *, void *,       int *);
typedef int (EMPI_Win_delete_attr_function)(EMPI_Win, int, void *, void *);
typedef void (EMPI_Comm_errhandler_function)(EMPI_Comm *, int *, ...);
typedef void (EMPI_File_errhandler_function)(EMPI_File *, int *, ...);
typedef void (EMPI_Win_errhandler_function)(EMPI_Win *, int *, ...);
typedef EMPI_Comm_errhandler_function EMPI_Comm_errhandler_fn;
typedef EMPI_File_errhandler_function EMPI_File_errhandler_fn;
typedef EMPI_Win_errhandler_function EMPI_Win_errhandler_fn;
typedef int EMPI_Errhandler;
typedef int EMPI_Request;
typedef int EMPI_Message;
typedef void (EMPI_User_function) ( void *, void *, int *, EMPI_Datatype * );
typedef int (EMPI_Copy_function) ( EMPI_Comm, int, void *, void *, void *, int * );
typedef int (EMPI_Delete_function) ( EMPI_Comm, int, void *, void * );
enum EMPIR_Combiner_enum {EMPI_COMBINER_NAMED = 1,    EMPI_COMBINER_DUP = 2,    EMPI_COMBINER_CONTIGUOUS = 3,    EMPI_COMBINER_VECTOR = 4,    EMPI_COMBINER_HVECTOR_INTEGER = 5,    EMPI_COMBINER_HVECTOR = 6,    EMPI_COMBINER_INDEXED = 7,    EMPI_COMBINER_HINDEXED_INTEGER = 8,    EMPI_COMBINER_HINDEXED = 9,    EMPI_COMBINER_INDEXED_BLOCK = 10,    EMPI_COMBINER_STRUCT_INTEGER = 11,    EMPI_COMBINER_STRUCT = 12,    EMPI_COMBINER_SUBARRAY = 13,    EMPI_COMBINER_DARRAY = 14,    EMPI_COMBINER_F90_REAL = 15,    EMPI_COMBINER_F90_COMPLEX = 16,    EMPI_COMBINER_F90_INTEGER = 17,    EMPI_COMBINER_RESIZED = 18,    EMPI_COMBINER_HINDEXED_BLOCK = 19};
typedef int EMPI_Info;
typedef long EMPI_Aint;
typedef int EMPI_Fint;
typedef long long EMPI_Count;
typedef long long EMPI_Offset;
typedef struct EMPI_Status {int count_lo;    int count_hi_and_cancelled;    int EMPI_SOURCE;    int EMPI_TAG;    int EMPI_ERROR;} EMPI_Status;
typedef struct EMPIR_T_enum_s * EMPI_T_enum;
typedef struct EMPIR_T_cvar_handle_s * EMPI_T_cvar_handle;
typedef struct EMPIR_T_pvar_handle_s * EMPI_T_pvar_handle;
typedef struct EMPIR_T_pvar_session_s * EMPI_T_pvar_session;
typedef enum EMPIR_T_verbosity_t {EMPIX_T_VERBOSITY_INVALID = 0,    EMPI_T_VERBOSITY_USER_BASIC = 221,    EMPI_T_VERBOSITY_USER_DETAIL,    EMPI_T_VERBOSITY_USER_ALL,    EMPI_T_VERBOSITY_TUNER_BASIC,    EMPI_T_VERBOSITY_TUNER_DETAIL,    EMPI_T_VERBOSITY_TUNER_ALL,    EMPI_T_VERBOSITY_EMPIDEV_BASIC,    EMPI_T_VERBOSITY_EMPIDEV_DETAIL,    EMPI_T_VERBOSITY_EMPIDEV_ALL} EMPIR_T_verbosity_t;
typedef enum EMPIR_T_bind_t {EMPIX_T_BIND_INVALID = 0,    EMPI_T_BIND_NO_OBJECT = 9700,    EMPI_T_BIND_EMPI_COMM,    EMPI_T_BIND_EMPI_DATATYPE,    EMPI_T_BIND_EMPI_ERRHANDLER,    EMPI_T_BIND_EMPI_FILE,    EMPI_T_BIND_EMPI_GROUP,    EMPI_T_BIND_EMPI_OP,    EMPI_T_BIND_EMPI_REQUEST,    EMPI_T_BIND_EMPI_WIN,    EMPI_T_BIND_EMPI_MESSAGE,    EMPI_T_BIND_EMPI_INFO} EMPIR_T_bind_t;
typedef enum EMPIR_T_scope_t {EMPIX_T_SCOPE_INVALID = 0,    EMPI_T_SCOPE_CONSTANT = 60438,    EMPI_T_SCOPE_READONLY,    EMPI_T_SCOPE_LOCAL,    EMPI_T_SCOPE_GROUP,    EMPI_T_SCOPE_GROUP_EQ,    EMPI_T_SCOPE_ALL,    EMPI_T_SCOPE_ALL_EQ} EMPIR_T_scope_t;
typedef enum EMPIR_T_pvar_class_t {EMPIX_T_PVAR_CLASS_INVALID = 0,    EMPIR_T_PVAR_CLASS_FIRST = 240,    EMPI_T_PVAR_CLASS_STATE = EMPIR_T_PVAR_CLASS_FIRST,    EMPI_T_PVAR_CLASS_LEVEL,    EMPI_T_PVAR_CLASS_SIZE,    EMPI_T_PVAR_CLASS_PERCENTAGE,    EMPI_T_PVAR_CLASS_HIGHWATERMARK,    EMPI_T_PVAR_CLASS_LOWWATERMARK,    EMPI_T_PVAR_CLASS_COUNTER,    EMPI_T_PVAR_CLASS_AGGREGATE,    EMPI_T_PVAR_CLASS_TIMER,    EMPI_T_PVAR_CLASS_GENERIC,    EMPIR_T_PVAR_CLASS_LAST,    EMPIR_T_PVAR_CLASS_NUMBER = EMPIR_T_PVAR_CLASS_LAST - EMPIR_T_PVAR_CLASS_FIRST} EMPIR_T_pvar_class_t;
typedef struct {EMPI_Fint count_lo;    EMPI_Fint count_hi_and_cancelled;    EMPI_Fint EMPI_SOURCE;    EMPI_Fint EMPI_TAG;    EMPI_Fint EMPI_ERROR;} EMPI_F08_Status;
typedef int (EMPI_Grequest_cancel_function)(void *, int);
typedef int (EMPI_Grequest_free_function)(void *);
typedef int (EMPI_Grequest_query_function)(void *, EMPI_Status *);
typedef int (EMPIX_Grequest_poll_function)(void *, EMPI_Status *);
typedef int (EMPIX_Grequest_wait_function)(int, void **, double, EMPI_Status *);
typedef int (EMPI_Datarep_conversion_function)(void *, EMPI_Datatype, int,              void *, EMPI_Offset, void *);
typedef int (EMPI_Datarep_extent_function)(EMPI_Datatype datatype, EMPI_Aint *,                       void *);
typedef int EMPIX_Grequest_class;
typedef struct mpixi_mutex_s * EMPIX_Mutex;
#endif
